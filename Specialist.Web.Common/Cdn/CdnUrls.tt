<#@ template debug="True" hostspecific="True" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="$(ProjectDir)bin\Debug\SimpleUtils.dll" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Xml.dll" #>
<#@ assembly name="System.Xml.Linq.dll" #>

<#@ import namespace="System.Linq" #>

<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="SimpleUtils.Common.Extensions" #>

<# 
var xmlPath = Host.ResolvePath(@"cdnstruct.xml");
	var xml = XDocument.Load(xmlPath);
	var cls = FromXml(xml.Root, new CdnFiles{Name = "C:/Inetpub/cdn/"});
	var fullUrl = FromXml(xml.Root, new CdnFiles{Name = "//cdn.specialist.ru/"});
 #>
 using SimpleUtils.FluentHtml.Tags;
namespace Specialist.Web.Common.Cdn {
	public static class CdnFiles {
	   public static class Paths {
		<#= cls.PathString() #>
		}  
	   public static class ImageUrls {
		<#= cls.UrlString() #>
		}  
	   public static class Images {
		<#= fullUrl.ImageString() #>
		}  
	   public static class FullUrls {
		<#= fullUrl.FullUrlString() #>
		}  
	}

}

<#+
	CdnFiles FromXml(XElement element, CdnFiles parent) {
			var files = new CdnFiles{Name = element.Name.ToString(), Parent = parent}; 																									
			files.InnerFiles = element.Elements().Select(x => FromXml(x,files)).ToList();
            return files;
		}
#>

<#+
	public class CdnFiles {
	   
	   
	 
	    public string Name { get; set; }
		public CdnFiles Parent { get; set; }

		public List<CdnFiles> InnerFiles { get; set; }
	public string GetPath(){
		if(Parent == null)
			return Name;
		return Parent.GetPath() + Name	+ "/"; 	       	   																													
    }
	public string GetUrl(){
		if(Parent == null)
			return "";
		return (Parent.GetUrl() + Name	+ "/").Replace("Content/Image/",""); 	       	   																													
    }
	public string GetName(){
		if(Parent == null || Parent.Parent == null)
			return "";
		return Parent.GetName() + Name; 	       	   																													
    }
	  
        public string PathString(){
	       if(InnerFiles.Any())
	           return InnerFiles.Select(x => x.PathString()).JoinWith("");
	     
			return "public const string {0} = \"{1}\";\n".FormatWith(GetName(), GetPath());
		}

        public string FullUrlString(){
	       if(InnerFiles.Any())
	           return InnerFiles.Select(x => x.PathString()).JoinWith("");
	     
			return "public const string {0} = \"{1}\";\n".FormatWith(GetName(), GetPath());
		}
        public string ImageString(){
	       if(InnerFiles.Any())
	           return InnerFiles.Select(x => x.ImageString()).JoinWith("");
	     
			return "public static TagImg {0}(string file){{ return Htmls.img.Src(\"{1}\" + file).Alt(\"\"); }}"
				.FormatWith(GetName(), GetPath()) + Environment.NewLine;
		}

        public string UrlString(){
	       if(InnerFiles.Any())
			return InnerFiles.Select(x => x.UrlString()).JoinWith("");
	     
			return "public const string {0} = \"{1}\";\n".FormatWith(GetName(), GetUrl());
		}
	}


#>