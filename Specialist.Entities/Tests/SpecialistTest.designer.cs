#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Specialist.Entities.Tests
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SpecialistWeb")]
	public partial class SpecialistTestDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTestAnswer(TestAnswer instance);
    partial void UpdateTestAnswer(TestAnswer instance);
    partial void DeleteTestAnswer(TestAnswer instance);
    partial void InsertTest(Test instance);
    partial void UpdateTest(Test instance);
    partial void DeleteTest(Test instance);
    partial void InsertTestModule(TestModule instance);
    partial void UpdateTestModule(TestModule instance);
    partial void DeleteTestModule(TestModule instance);
    partial void InsertTestQuestion(TestQuestion instance);
    partial void UpdateTestQuestion(TestQuestion instance);
    partial void DeleteTestQuestion(TestQuestion instance);
    partial void InsertUserTest(UserTest instance);
    partial void UpdateUserTest(UserTest instance);
    partial void DeleteUserTest(UserTest instance);
    partial void InsertGroupInfo(GroupInfo instance);
    partial void UpdateGroupInfo(GroupInfo instance);
    partial void DeleteGroupInfo(GroupInfo instance);
    partial void InsertGroupTest(GroupTest instance);
    partial void UpdateGroupTest(GroupTest instance);
    partial void DeleteGroupTest(GroupTest instance);
    partial void InsertTestPassRule(TestPassRule instance);
    partial void UpdateTestPassRule(TestPassRule instance);
    partial void DeleteTestPassRule(TestPassRule instance);
    partial void InsertTestModuleSet(TestModuleSet instance);
    partial void UpdateTestModuleSet(TestModuleSet instance);
    partial void DeleteTestModuleSet(TestModuleSet instance);
    partial void InsertUserTestAnswer(UserTestAnswer instance);
    partial void UpdateUserTestAnswer(UserTestAnswer instance);
    partial void DeleteUserTestAnswer(UserTestAnswer instance);
    partial void InsertTestCalc(TestCalc instance);
    partial void UpdateTestCalc(TestCalc instance);
    partial void DeleteTestCalc(TestCalc instance);
    #endregion
		
		public SpecialistTestDataContext() : 
				base(global::Specialist.Entities.Properties.Settings.Default.SpecialistWebConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SpecialistTestDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SpecialistTestDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SpecialistTestDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SpecialistTestDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TestAnswer> TestAnswers
		{
			get
			{
				return this.GetTable<TestAnswer>();
			}
		}
		
		public System.Data.Linq.Table<Test> Tests
		{
			get
			{
				return this.GetTable<Test>();
			}
		}
		
		public System.Data.Linq.Table<TestModule> TestModules
		{
			get
			{
				return this.GetTable<TestModule>();
			}
		}
		
		public System.Data.Linq.Table<TestQuestion> TestQuestions
		{
			get
			{
				return this.GetTable<TestQuestion>();
			}
		}
		
		public System.Data.Linq.Table<UserTest> UserTests
		{
			get
			{
				return this.GetTable<UserTest>();
			}
		}
		
		public System.Data.Linq.Table<GroupInfo> GroupInfos
		{
			get
			{
				return this.GetTable<GroupInfo>();
			}
		}
		
		public System.Data.Linq.Table<GroupTest> GroupTests
		{
			get
			{
				return this.GetTable<GroupTest>();
			}
		}
		
		public System.Data.Linq.Table<TestPassRule> TestPassRules
		{
			get
			{
				return this.GetTable<TestPassRule>();
			}
		}
		
		public System.Data.Linq.Table<TestModuleSet> TestModuleSets
		{
			get
			{
				return this.GetTable<TestModuleSet>();
			}
		}
		
		public System.Data.Linq.Table<UserTestAnswer> UserTestAnswers
		{
			get
			{
				return this.GetTable<UserTestAnswer>();
			}
		}
		
		public System.Data.Linq.Table<TestCalc> TestCalcs
		{
			get
			{
				return this.GetTable<TestCalc>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SpecialistWeb.dbo.TestAnswers")]
	public partial class TestAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private System.Nullable<bool> _IsRight;
		
		private System.Nullable<int> _ComparableId;
		
		private System.Nullable<short> _Sort;
		
		private int _QuestionId;
		
		private EntityRef<TestAnswer> _Answer;
		
		private EntityRef<TestAnswer> _ComparableAnswer;
		
		private EntityRef<TestQuestion> _TestQuestion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsRightChanging(System.Nullable<bool> value);
    partial void OnIsRightChanged();
    partial void OnComparableIdChanging(System.Nullable<int> value);
    partial void OnComparableIdChanged();
    partial void OnSortChanging(System.Nullable<short> value);
    partial void OnSortChanged();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    #endregion
		
		public TestAnswer()
		{
			this._Answer = default(EntityRef<TestAnswer>);
			this._ComparableAnswer = default(EntityRef<TestAnswer>);
			this._TestQuestion = default(EntityRef<TestQuestion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRight", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsRight
		{
			get
			{
				return this._IsRight;
			}
			set
			{
				if ((this._IsRight != value))
				{
					this.OnIsRightChanging(value);
					this.SendPropertyChanging();
					this._IsRight = value;
					this.SendPropertyChanged("IsRight");
					this.OnIsRightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComparableId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ComparableId
		{
			get
			{
				return this._ComparableId;
			}
			set
			{
				if ((this._ComparableId != value))
				{
					if (this._ComparableAnswer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComparableIdChanging(value);
					this.SendPropertyChanging();
					this._ComparableId = value;
					this.SendPropertyChanged("ComparableId");
					this.OnComparableIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sort", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> Sort
		{
			get
			{
				return this._Sort;
			}
			set
			{
				if ((this._Sort != value))
				{
					this.OnSortChanging(value);
					this.SendPropertyChanging();
					this._Sort = value;
					this.SendPropertyChanged("Sort");
					this.OnSortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._TestQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestAnswer_TestAnswer", Storage="_Answer", ThisKey="Id", OtherKey="ComparableId", IsUnique=true, IsForeignKey=false)]
		public TestAnswer Answer
		{
			get
			{
				return this._Answer.Entity;
			}
			set
			{
				TestAnswer previousValue = this._Answer.Entity;
				if (((previousValue != value) 
							|| (this._Answer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Answer.Entity = null;
						previousValue.ComparableAnswer = null;
					}
					this._Answer.Entity = value;
					if ((value != null))
					{
						value.ComparableAnswer = this;
					}
					this.SendPropertyChanged("Answer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestAnswer_TestAnswer", Storage="_ComparableAnswer", ThisKey="ComparableId", OtherKey="Id", IsForeignKey=true)]
		public TestAnswer ComparableAnswer
		{
			get
			{
				return this._ComparableAnswer.Entity;
			}
			set
			{
				TestAnswer previousValue = this._ComparableAnswer.Entity;
				if (((previousValue != value) 
							|| (this._ComparableAnswer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ComparableAnswer.Entity = null;
						previousValue.Answer = null;
					}
					this._ComparableAnswer.Entity = value;
					if ((value != null))
					{
						value.Answer = this;
						this._ComparableId = value.Id;
					}
					else
					{
						this._ComparableId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ComparableAnswer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestQuestion_TestAnswer", Storage="_TestQuestion", ThisKey="QuestionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TestQuestion TestQuestion
		{
			get
			{
				return this._TestQuestion.Entity;
			}
			set
			{
				TestQuestion previousValue = this._TestQuestion.Entity;
				if (((previousValue != value) 
							|| (this._TestQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestQuestion.Entity = null;
						previousValue.TestAnswers.Remove(this);
					}
					this._TestQuestion.Entity = value;
					if ((value != null))
					{
						value.TestAnswers.Add(this);
						this._QuestionId = value.Id;
					}
					else
					{
						this._QuestionId = default(int);
					}
					this.SendPropertyChanged("TestQuestion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SpecialistWeb.dbo.Tests")]
	public partial class Test : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Description;
		
		private byte _Status;
		
		private string _Author_TC;
		
		private string _LastChanger_TC;
		
		private System.DateTime _UpdateDate;
		
		private System.Nullable<int> _CompanyId;
		
		private string _Checker_TC;
		
		private bool _IsNew;
		
		private bool _Certified;
		
		private string _ProductName;
		
		private string _ProductNameEng;
		
		private int _WebSortOrder;
		
		private string _CourseTCList;
		
		private bool _NoRestriction;
		
		private string _TestIdList;
		
		private EntitySet<TestModule> _TestModules;
		
		private EntitySet<TestQuestion> _TestQuestions;
		
		private EntitySet<UserTest> _UserTests;
		
		private EntitySet<GroupTest> _GroupTests;
		
		private EntityRef<TestPassRule> _TestPassRule;
		
		private EntitySet<TestModuleSet> _TestModuleSets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnAuthor_TCChanging(string value);
    partial void OnAuthor_TCChanged();
    partial void OnLastChanger_TCChanging(string value);
    partial void OnLastChanger_TCChanged();
    partial void OnUpdateDateChanging(System.DateTime value);
    partial void OnUpdateDateChanged();
    partial void OnCompanyIdChanging(System.Nullable<int> value);
    partial void OnCompanyIdChanged();
    partial void OnChecker_TCChanging(string value);
    partial void OnChecker_TCChanged();
    partial void OnIsNewChanging(bool value);
    partial void OnIsNewChanged();
    partial void OnCertifiedChanging(bool value);
    partial void OnCertifiedChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnProductNameEngChanging(string value);
    partial void OnProductNameEngChanged();
    partial void OnWebSortOrderChanging(int value);
    partial void OnWebSortOrderChanged();
    partial void OnCourseTCListChanging(string value);
    partial void OnCourseTCListChanged();
    partial void OnNoRestrictionChanging(bool value);
    partial void OnNoRestrictionChanged();
    partial void OnTestIdListChanging(string value);
    partial void OnTestIdListChanged();
    #endregion
		
		public Test()
		{
			this._TestModules = new EntitySet<TestModule>(new Action<TestModule>(this.attach_TestModules), new Action<TestModule>(this.detach_TestModules));
			this._TestQuestions = new EntitySet<TestQuestion>(new Action<TestQuestion>(this.attach_TestQuestions), new Action<TestQuestion>(this.detach_TestQuestions));
			this._UserTests = new EntitySet<UserTest>(new Action<UserTest>(this.attach_UserTests), new Action<UserTest>(this.detach_UserTests));
			this._GroupTests = new EntitySet<GroupTest>(new Action<GroupTest>(this.attach_GroupTests), new Action<GroupTest>(this.detach_GroupTests));
			this._TestPassRule = default(EntityRef<TestPassRule>);
			this._TestModuleSets = new EntitySet<TestModuleSet>(new Action<TestModuleSet>(this.attach_TestModuleSets), new Action<TestModuleSet>(this.detach_TestModuleSets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Author_TC", DbType="VarChar(7)", UpdateCheck=UpdateCheck.Never)]
		public string Author_TC
		{
			get
			{
				return this._Author_TC;
			}
			set
			{
				if ((this._Author_TC != value))
				{
					this.OnAuthor_TCChanging(value);
					this.SendPropertyChanging();
					this._Author_TC = value;
					this.SendPropertyChanged("Author_TC");
					this.OnAuthor_TCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastChanger_TC", DbType="VarChar(7) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LastChanger_TC
		{
			get
			{
				return this._LastChanger_TC;
			}
			set
			{
				if ((this._LastChanger_TC != value))
				{
					this.OnLastChanger_TCChanging(value);
					this.SendPropertyChanging();
					this._LastChanger_TC = value;
					this.SendPropertyChanged("LastChanger_TC");
					this.OnLastChanger_TCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="SmallDateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Checker_TC", DbType="VarChar(7)", UpdateCheck=UpdateCheck.Never)]
		public string Checker_TC
		{
			get
			{
				return this._Checker_TC;
			}
			set
			{
				if ((this._Checker_TC != value))
				{
					this.OnChecker_TCChanging(value);
					this.SendPropertyChanging();
					this._Checker_TC = value;
					this.SendPropertyChanged("Checker_TC");
					this.OnChecker_TCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsNew", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsNew
		{
			get
			{
				return this._IsNew;
			}
			set
			{
				if ((this._IsNew != value))
				{
					this.OnIsNewChanging(value);
					this.SendPropertyChanging();
					this._IsNew = value;
					this.SendPropertyChanged("IsNew");
					this.OnIsNewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Certified", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Certified
		{
			get
			{
				return this._Certified;
			}
			set
			{
				if ((this._Certified != value))
				{
					this.OnCertifiedChanging(value);
					this.SendPropertyChanging();
					this._Certified = value;
					this.SendPropertyChanged("Certified");
					this.OnCertifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", UpdateCheck=UpdateCheck.Never)]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductNameEng", UpdateCheck=UpdateCheck.Never)]
		public string ProductNameEng
		{
			get
			{
				return this._ProductNameEng;
			}
			set
			{
				if ((this._ProductNameEng != value))
				{
					this.OnProductNameEngChanging(value);
					this.SendPropertyChanging();
					this._ProductNameEng = value;
					this.SendPropertyChanged("ProductNameEng");
					this.OnProductNameEngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebSortOrder")]
		public int WebSortOrder
		{
			get
			{
				return this._WebSortOrder;
			}
			set
			{
				if ((this._WebSortOrder != value))
				{
					this.OnWebSortOrderChanging(value);
					this.SendPropertyChanging();
					this._WebSortOrder = value;
					this.SendPropertyChanged("WebSortOrder");
					this.OnWebSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseTCList")]
		public string CourseTCList
		{
			get
			{
				return this._CourseTCList;
			}
			set
			{
				if ((this._CourseTCList != value))
				{
					this.OnCourseTCListChanging(value);
					this.SendPropertyChanging();
					this._CourseTCList = value;
					this.SendPropertyChanged("CourseTCList");
					this.OnCourseTCListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoRestriction")]
		public bool NoRestriction
		{
			get
			{
				return this._NoRestriction;
			}
			set
			{
				if ((this._NoRestriction != value))
				{
					this.OnNoRestrictionChanging(value);
					this.SendPropertyChanging();
					this._NoRestriction = value;
					this.SendPropertyChanged("NoRestriction");
					this.OnNoRestrictionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestIdList")]
		public string TestIdList
		{
			get
			{
				return this._TestIdList;
			}
			set
			{
				if ((this._TestIdList != value))
				{
					this.OnTestIdListChanging(value);
					this.SendPropertyChanging();
					this._TestIdList = value;
					this.SendPropertyChanged("TestIdList");
					this.OnTestIdListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_TestModule", Storage="_TestModules", ThisKey="Id", OtherKey="TestId")]
		public EntitySet<TestModule> TestModules
		{
			get
			{
				return this._TestModules;
			}
			set
			{
				this._TestModules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_TestQuestion", Storage="_TestQuestions", ThisKey="Id", OtherKey="TestId")]
		public EntitySet<TestQuestion> TestQuestions
		{
			get
			{
				return this._TestQuestions;
			}
			set
			{
				this._TestQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_UserTest", Storage="_UserTests", ThisKey="Id", OtherKey="TestId")]
		public EntitySet<UserTest> UserTests
		{
			get
			{
				return this._UserTests;
			}
			set
			{
				this._UserTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_GroupTest", Storage="_GroupTests", ThisKey="Id", OtherKey="TestId")]
		public EntitySet<GroupTest> GroupTests
		{
			get
			{
				return this._GroupTests;
			}
			set
			{
				this._GroupTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_TestPassRule", Storage="_TestPassRule", ThisKey="Id", OtherKey="TestId", IsUnique=true, IsForeignKey=false)]
		public TestPassRule TestPassRule
		{
			get
			{
				return this._TestPassRule.Entity;
			}
			set
			{
				TestPassRule previousValue = this._TestPassRule.Entity;
				if (((previousValue != value) 
							|| (this._TestPassRule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestPassRule.Entity = null;
						previousValue.Test = null;
					}
					this._TestPassRule.Entity = value;
					if ((value != null))
					{
						value.Test = this;
					}
					this.SendPropertyChanged("TestPassRule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_TestModuleSet", Storage="_TestModuleSets", ThisKey="Id", OtherKey="TestId")]
		public EntitySet<TestModuleSet> TestModuleSets
		{
			get
			{
				return this._TestModuleSets;
			}
			set
			{
				this._TestModuleSets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestModules(TestModule entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_TestModules(TestModule entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
		
		private void attach_TestQuestions(TestQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_TestQuestions(TestQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
		
		private void attach_UserTests(UserTest entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_UserTests(UserTest entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
		
		private void attach_GroupTests(GroupTest entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_GroupTests(GroupTest entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
		
		private void attach_TestModuleSets(TestModuleSet entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_TestModuleSets(TestModuleSet entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SpecialistWeb.dbo.TestModules")]
	public partial class TestModule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _TestId;
		
		private System.Nullable<decimal> _CourseContent_ID;
		
		private EntitySet<TestQuestion> _TestQuestions;
		
		private EntityRef<Test> _Test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTestIdChanging(int value);
    partial void OnTestIdChanged();
    partial void OnCourseContent_IDChanging(System.Nullable<decimal> value);
    partial void OnCourseContent_IDChanged();
    #endregion
		
		public TestModule()
		{
			this._TestQuestions = new EntitySet<TestQuestion>(new Action<TestQuestion>(this.attach_TestQuestions), new Action<TestQuestion>(this.detach_TestQuestions));
			this._Test = default(EntityRef<Test>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int TestId
		{
			get
			{
				return this._TestId;
			}
			set
			{
				if ((this._TestId != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestIdChanging(value);
					this.SendPropertyChanging();
					this._TestId = value;
					this.SendPropertyChanged("TestId");
					this.OnTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseContent_ID")]
		public System.Nullable<decimal> CourseContent_ID
		{
			get
			{
				return this._CourseContent_ID;
			}
			set
			{
				if ((this._CourseContent_ID != value))
				{
					this.OnCourseContent_IDChanging(value);
					this.SendPropertyChanging();
					this._CourseContent_ID = value;
					this.SendPropertyChanged("CourseContent_ID");
					this.OnCourseContent_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestModule_TestQuestion", Storage="_TestQuestions", ThisKey="Id", OtherKey="ModuleId")]
		public EntitySet<TestQuestion> TestQuestions
		{
			get
			{
				return this._TestQuestions;
			}
			set
			{
				this._TestQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_TestModule", Storage="_Test", ThisKey="TestId", OtherKey="Id", IsForeignKey=true)]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.TestModules.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.TestModules.Add(this);
						this._TestId = value.Id;
					}
					else
					{
						this._TestId = default(int);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestQuestions(TestQuestion entity)
		{
			this.SendPropertyChanging();
			entity.TestModule = this;
		}
		
		private void detach_TestQuestions(TestQuestion entity)
		{
			this.SendPropertyChanging();
			entity.TestModule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SpecialistWeb.dbo.TestQuestions")]
	public partial class TestQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private byte _Type;
		
		private int _TestId;
		
		private System.Nullable<int> _ModuleId;
		
		private EntitySet<TestAnswer> _TestAnswers;
		
		private EntitySet<UserTestAnswer> _UserTestAnswers;
		
		private EntityRef<TestModule> _TestModule;
		
		private EntityRef<Test> _Test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTypeChanging(byte value);
    partial void OnTypeChanged();
    partial void OnTestIdChanging(int value);
    partial void OnTestIdChanged();
    partial void OnModuleIdChanging(System.Nullable<int> value);
    partial void OnModuleIdChanged();
    #endregion
		
		public TestQuestion()
		{
			this._TestAnswers = new EntitySet<TestAnswer>(new Action<TestAnswer>(this.attach_TestAnswers), new Action<TestAnswer>(this.detach_TestAnswers));
			this._UserTestAnswers = new EntitySet<UserTestAnswer>(new Action<UserTestAnswer>(this.attach_UserTestAnswers), new Action<UserTestAnswer>(this.detach_UserTestAnswers));
			this._TestModule = default(EntityRef<TestModule>);
			this._Test = default(EntityRef<Test>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int TestId
		{
			get
			{
				return this._TestId;
			}
			set
			{
				if ((this._TestId != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestIdChanging(value);
					this.SendPropertyChanging();
					this._TestId = value;
					this.SendPropertyChanged("TestId");
					this.OnTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModuleId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ModuleId
		{
			get
			{
				return this._ModuleId;
			}
			set
			{
				if ((this._ModuleId != value))
				{
					if (this._TestModule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModuleIdChanging(value);
					this.SendPropertyChanging();
					this._ModuleId = value;
					this.SendPropertyChanged("ModuleId");
					this.OnModuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestQuestion_TestAnswer", Storage="_TestAnswers", ThisKey="Id", OtherKey="QuestionId")]
		public EntitySet<TestAnswer> TestAnswers
		{
			get
			{
				return this._TestAnswers;
			}
			set
			{
				this._TestAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestQuestion_UserTestAnswer", Storage="_UserTestAnswers", ThisKey="Id", OtherKey="QuestionId")]
		public EntitySet<UserTestAnswer> UserTestAnswers
		{
			get
			{
				return this._UserTestAnswers;
			}
			set
			{
				this._UserTestAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestModule_TestQuestion", Storage="_TestModule", ThisKey="ModuleId", OtherKey="Id", IsForeignKey=true)]
		public TestModule TestModule
		{
			get
			{
				return this._TestModule.Entity;
			}
			set
			{
				TestModule previousValue = this._TestModule.Entity;
				if (((previousValue != value) 
							|| (this._TestModule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestModule.Entity = null;
						previousValue.TestQuestions.Remove(this);
					}
					this._TestModule.Entity = value;
					if ((value != null))
					{
						value.TestQuestions.Add(this);
						this._ModuleId = value.Id;
					}
					else
					{
						this._ModuleId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TestModule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_TestQuestion", Storage="_Test", ThisKey="TestId", OtherKey="Id", IsForeignKey=true)]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.TestQuestions.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.TestQuestions.Add(this);
						this._TestId = value.Id;
					}
					else
					{
						this._TestId = default(int);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestAnswers(TestAnswer entity)
		{
			this.SendPropertyChanging();
			entity.TestQuestion = this;
		}
		
		private void detach_TestAnswers(TestAnswer entity)
		{
			this.SendPropertyChanging();
			entity.TestQuestion = null;
		}
		
		private void attach_UserTestAnswers(UserTestAnswer entity)
		{
			this.SendPropertyChanging();
			entity.TestQuestion = this;
		}
		
		private void detach_UserTestAnswers(UserTestAnswer entity)
		{
			this.SendPropertyChanging();
			entity.TestQuestion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SpecialistWeb.dbo.UserTests")]
	public partial class UserTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private int _TestId;
		
		private byte _Status;
		
		private System.DateTime _RunDate;
		
		private short _Time;
		
		private int _TestPassRuleId;
		
		private string _Stats;
		
		private System.Nullable<short> _RightCount;
		
		private System.Nullable<short> _WrongCount;
		
		private string _Course_TC;
		
		private bool _IsBest;
		
		private System.Nullable<int> _TestModuleSetId;
		
		private bool _ShowAnswers;
		
		private EntitySet<UserTestAnswer> _UserTestAnswers;
		
		private EntityRef<Test> _Test;
		
		private EntityRef<TestPassRule> _TestPassRule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnTestIdChanging(int value);
    partial void OnTestIdChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnRunDateChanging(System.DateTime value);
    partial void OnRunDateChanged();
    partial void OnTimeChanging(short value);
    partial void OnTimeChanged();
    partial void OnTestPassRuleIdChanging(int value);
    partial void OnTestPassRuleIdChanged();
    partial void OnStatsChanging(string value);
    partial void OnStatsChanged();
    partial void OnRightCountChanging(System.Nullable<short> value);
    partial void OnRightCountChanged();
    partial void OnWrongCountChanging(System.Nullable<short> value);
    partial void OnWrongCountChanged();
    partial void OnCourse_TCChanging(string value);
    partial void OnCourse_TCChanged();
    partial void OnIsBestChanging(bool value);
    partial void OnIsBestChanged();
    partial void OnTestModuleSetIdChanging(System.Nullable<int> value);
    partial void OnTestModuleSetIdChanged();
    partial void OnShowAnswersChanging(bool value);
    partial void OnShowAnswersChanged();
    #endregion
		
		public UserTest()
		{
			this._UserTestAnswers = new EntitySet<UserTestAnswer>(new Action<UserTestAnswer>(this.attach_UserTestAnswers), new Action<UserTestAnswer>(this.detach_UserTestAnswers));
			this._Test = default(EntityRef<Test>);
			this._TestPassRule = default(EntityRef<TestPassRule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int TestId
		{
			get
			{
				return this._TestId;
			}
			set
			{
				if ((this._TestId != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestIdChanging(value);
					this.SendPropertyChanging();
					this._TestId = value;
					this.SendPropertyChanged("TestId");
					this.OnTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunDate", DbType="SmallDateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime RunDate
		{
			get
			{
				return this._RunDate;
			}
			set
			{
				if ((this._RunDate != value))
				{
					this.OnRunDateChanging(value);
					this.SendPropertyChanging();
					this._RunDate = value;
					this.SendPropertyChanged("RunDate");
					this.OnRunDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="SmallInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public short Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestPassRuleId", UpdateCheck=UpdateCheck.Never)]
		public int TestPassRuleId
		{
			get
			{
				return this._TestPassRuleId;
			}
			set
			{
				if ((this._TestPassRuleId != value))
				{
					if (this._TestPassRule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestPassRuleIdChanging(value);
					this.SendPropertyChanging();
					this._TestPassRuleId = value;
					this.SendPropertyChanged("TestPassRuleId");
					this.OnTestPassRuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stats", UpdateCheck=UpdateCheck.Never)]
		public string Stats
		{
			get
			{
				return this._Stats;
			}
			set
			{
				if ((this._Stats != value))
				{
					this.OnStatsChanging(value);
					this.SendPropertyChanging();
					this._Stats = value;
					this.SendPropertyChanged("Stats");
					this.OnStatsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RightCount", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> RightCount
		{
			get
			{
				return this._RightCount;
			}
			set
			{
				if ((this._RightCount != value))
				{
					this.OnRightCountChanging(value);
					this.SendPropertyChanging();
					this._RightCount = value;
					this.SendPropertyChanged("RightCount");
					this.OnRightCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WrongCount", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> WrongCount
		{
			get
			{
				return this._WrongCount;
			}
			set
			{
				if ((this._WrongCount != value))
				{
					this.OnWrongCountChanging(value);
					this.SendPropertyChanging();
					this._WrongCount = value;
					this.SendPropertyChanged("WrongCount");
					this.OnWrongCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Course_TC")]
		public string Course_TC
		{
			get
			{
				return this._Course_TC;
			}
			set
			{
				if ((this._Course_TC != value))
				{
					this.OnCourse_TCChanging(value);
					this.SendPropertyChanging();
					this._Course_TC = value;
					this.SendPropertyChanged("Course_TC");
					this.OnCourse_TCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBest")]
		public bool IsBest
		{
			get
			{
				return this._IsBest;
			}
			set
			{
				if ((this._IsBest != value))
				{
					this.OnIsBestChanging(value);
					this.SendPropertyChanging();
					this._IsBest = value;
					this.SendPropertyChanged("IsBest");
					this.OnIsBestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestModuleSetId")]
		public System.Nullable<int> TestModuleSetId
		{
			get
			{
				return this._TestModuleSetId;
			}
			set
			{
				if ((this._TestModuleSetId != value))
				{
					this.OnTestModuleSetIdChanging(value);
					this.SendPropertyChanging();
					this._TestModuleSetId = value;
					this.SendPropertyChanged("TestModuleSetId");
					this.OnTestModuleSetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowAnswers")]
		public bool ShowAnswers
		{
			get
			{
				return this._ShowAnswers;
			}
			set
			{
				if ((this._ShowAnswers != value))
				{
					this.OnShowAnswersChanging(value);
					this.SendPropertyChanging();
					this._ShowAnswers = value;
					this.SendPropertyChanged("ShowAnswers");
					this.OnShowAnswersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTest_UserTestAnswer", Storage="_UserTestAnswers", ThisKey="Id", OtherKey="UserTestId")]
		public EntitySet<UserTestAnswer> UserTestAnswers
		{
			get
			{
				return this._UserTestAnswers;
			}
			set
			{
				this._UserTestAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_UserTest", Storage="_Test", ThisKey="TestId", OtherKey="Id", IsForeignKey=true)]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.UserTests.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.UserTests.Add(this);
						this._TestId = value.Id;
					}
					else
					{
						this._TestId = default(int);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestPassRule_UserTest", Storage="_TestPassRule", ThisKey="TestPassRuleId", OtherKey="Id", IsForeignKey=true)]
		public TestPassRule TestPassRule
		{
			get
			{
				return this._TestPassRule.Entity;
			}
			set
			{
				TestPassRule previousValue = this._TestPassRule.Entity;
				if (((previousValue != value) 
							|| (this._TestPassRule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestPassRule.Entity = null;
						previousValue.UserTests.Remove(this);
					}
					this._TestPassRule.Entity = value;
					if ((value != null))
					{
						value.UserTests.Add(this);
						this._TestPassRuleId = value.Id;
					}
					else
					{
						this._TestPassRuleId = default(int);
					}
					this.SendPropertyChanged("TestPassRule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserTestAnswers(UserTestAnswer entity)
		{
			this.SendPropertyChanging();
			entity.UserTest = this;
		}
		
		private void detach_UserTestAnswers(UserTestAnswer entity)
		{
			this.SendPropertyChanging();
			entity.UserTest = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SpecialistWeb.dbo.GroupInfos")]
	public partial class GroupInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _Group_ID;
		
		private int _CompanyId;
		
		private bool _IsComplete;
		
		private string _Notes;
		
		private EntitySet<GroupTest> _GroupTests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGroup_IDChanging(decimal value);
    partial void OnGroup_IDChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnIsCompleteChanging(bool value);
    partial void OnIsCompleteChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public GroupInfo()
		{
			this._GroupTests = new EntitySet<GroupTest>(new Action<GroupTest>(this.attach_GroupTests), new Action<GroupTest>(this.detach_GroupTests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Group_ID", DbType="Decimal(18,0) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Group_ID
		{
			get
			{
				return this._Group_ID;
			}
			set
			{
				if ((this._Group_ID != value))
				{
					this.OnGroup_IDChanging(value);
					this.SendPropertyChanging();
					this._Group_ID = value;
					this.SendPropertyChanged("Group_ID");
					this.OnGroup_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsComplete", UpdateCheck=UpdateCheck.Never)]
		public bool IsComplete
		{
			get
			{
				return this._IsComplete;
			}
			set
			{
				if ((this._IsComplete != value))
				{
					this.OnIsCompleteChanging(value);
					this.SendPropertyChanging();
					this._IsComplete = value;
					this.SendPropertyChanged("IsComplete");
					this.OnIsCompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupInfo_GroupTest", Storage="_GroupTests", ThisKey="Id", OtherKey="GroupInfoId")]
		public EntitySet<GroupTest> GroupTests
		{
			get
			{
				return this._GroupTests;
			}
			set
			{
				this._GroupTests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupTests(GroupTest entity)
		{
			this.SendPropertyChanging();
			entity.GroupInfo = this;
		}
		
		private void detach_GroupTests(GroupTest entity)
		{
			this.SendPropertyChanging();
			entity.GroupInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SpecialistWeb.dbo.GroupTests")]
	public partial class GroupTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _GroupInfoId;
		
		private int _TestId;
		
		private System.DateTime _DateBegin;
		
		private System.DateTime _DateEnd;
		
		private System.Nullable<byte> _AttemptCount;
		
		private EntityRef<TestPassRule> _TestPassRule;
		
		private EntityRef<GroupInfo> _GroupInfo;
		
		private EntityRef<Test> _Test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGroupInfoIdChanging(int value);
    partial void OnGroupInfoIdChanged();
    partial void OnTestIdChanging(int value);
    partial void OnTestIdChanged();
    partial void OnDateBeginChanging(System.DateTime value);
    partial void OnDateBeginChanged();
    partial void OnDateEndChanging(System.DateTime value);
    partial void OnDateEndChanged();
    partial void OnAttemptCountChanging(System.Nullable<byte> value);
    partial void OnAttemptCountChanged();
    #endregion
		
		public GroupTest()
		{
			this._TestPassRule = default(EntityRef<TestPassRule>);
			this._GroupInfo = default(EntityRef<GroupInfo>);
			this._Test = default(EntityRef<Test>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupInfoId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int GroupInfoId
		{
			get
			{
				return this._GroupInfoId;
			}
			set
			{
				if ((this._GroupInfoId != value))
				{
					if (this._GroupInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupInfoIdChanging(value);
					this.SendPropertyChanging();
					this._GroupInfoId = value;
					this.SendPropertyChanged("GroupInfoId");
					this.OnGroupInfoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int TestId
		{
			get
			{
				return this._TestId;
			}
			set
			{
				if ((this._TestId != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestIdChanging(value);
					this.SendPropertyChanging();
					this._TestId = value;
					this.SendPropertyChanged("TestId");
					this.OnTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateBegin", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime DateBegin
		{
			get
			{
				return this._DateBegin;
			}
			set
			{
				if ((this._DateBegin != value))
				{
					this.OnDateBeginChanging(value);
					this.SendPropertyChanging();
					this._DateBegin = value;
					this.SendPropertyChanged("DateBegin");
					this.OnDateBeginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEnd", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime DateEnd
		{
			get
			{
				return this._DateEnd;
			}
			set
			{
				if ((this._DateEnd != value))
				{
					this.OnDateEndChanging(value);
					this.SendPropertyChanging();
					this._DateEnd = value;
					this.SendPropertyChanged("DateEnd");
					this.OnDateEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttemptCount", DbType="TinyInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<byte> AttemptCount
		{
			get
			{
				return this._AttemptCount;
			}
			set
			{
				if ((this._AttemptCount != value))
				{
					this.OnAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._AttemptCount = value;
					this.SendPropertyChanged("AttemptCount");
					this.OnAttemptCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupTest_TestPassRule", Storage="_TestPassRule", ThisKey="Id", OtherKey="GroupTestId", IsUnique=true, IsForeignKey=false)]
		public TestPassRule TestPassRule
		{
			get
			{
				return this._TestPassRule.Entity;
			}
			set
			{
				TestPassRule previousValue = this._TestPassRule.Entity;
				if (((previousValue != value) 
							|| (this._TestPassRule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestPassRule.Entity = null;
						previousValue.GroupTest = null;
					}
					this._TestPassRule.Entity = value;
					if ((value != null))
					{
						value.GroupTest = this;
					}
					this.SendPropertyChanged("TestPassRule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupInfo_GroupTest", Storage="_GroupInfo", ThisKey="GroupInfoId", OtherKey="Id", IsForeignKey=true)]
		public GroupInfo GroupInfo
		{
			get
			{
				return this._GroupInfo.Entity;
			}
			set
			{
				GroupInfo previousValue = this._GroupInfo.Entity;
				if (((previousValue != value) 
							|| (this._GroupInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupInfo.Entity = null;
						previousValue.GroupTests.Remove(this);
					}
					this._GroupInfo.Entity = value;
					if ((value != null))
					{
						value.GroupTests.Add(this);
						this._GroupInfoId = value.Id;
					}
					else
					{
						this._GroupInfoId = default(int);
					}
					this.SendPropertyChanged("GroupInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_GroupTest", Storage="_Test", ThisKey="TestId", OtherKey="Id", IsForeignKey=true)]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.GroupTests.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.GroupTests.Add(this);
						this._TestId = value.Id;
					}
					else
					{
						this._TestId = default(int);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SpecialistWeb.dbo.TestPassRules")]
	public partial class TestPassRule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private short _PassMark;
		
		private short _QuestionCount;
		
		private short _Time;
		
		private System.Nullable<short> _AverageMark;
		
		private System.Nullable<short> _ExpertMark;
		
		private System.Nullable<int> _TestId;
		
		private System.Nullable<int> _GroupTestId;
		
		private string _ModulePercents;
		
		private EntitySet<UserTest> _UserTests;
		
		private EntitySet<TestModuleSet> _TestModuleSets;
		
		private EntityRef<GroupTest> _GroupTest;
		
		private EntityRef<Test> _Test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPassMarkChanging(short value);
    partial void OnPassMarkChanged();
    partial void OnQuestionCountChanging(short value);
    partial void OnQuestionCountChanged();
    partial void OnTimeChanging(short value);
    partial void OnTimeChanged();
    partial void OnAverageMarkChanging(System.Nullable<short> value);
    partial void OnAverageMarkChanged();
    partial void OnExpertMarkChanging(System.Nullable<short> value);
    partial void OnExpertMarkChanged();
    partial void OnTestIdChanging(System.Nullable<int> value);
    partial void OnTestIdChanged();
    partial void OnGroupTestIdChanging(System.Nullable<int> value);
    partial void OnGroupTestIdChanged();
    partial void OnModulePercentsChanging(string value);
    partial void OnModulePercentsChanged();
    #endregion
		
		public TestPassRule()
		{
			this._UserTests = new EntitySet<UserTest>(new Action<UserTest>(this.attach_UserTests), new Action<UserTest>(this.detach_UserTests));
			this._TestModuleSets = new EntitySet<TestModuleSet>(new Action<TestModuleSet>(this.attach_TestModuleSets), new Action<TestModuleSet>(this.detach_TestModuleSets));
			this._GroupTest = default(EntityRef<GroupTest>);
			this._Test = default(EntityRef<Test>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassMark", DbType="SmallInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public short PassMark
		{
			get
			{
				return this._PassMark;
			}
			set
			{
				if ((this._PassMark != value))
				{
					this.OnPassMarkChanging(value);
					this.SendPropertyChanging();
					this._PassMark = value;
					this.SendPropertyChanged("PassMark");
					this.OnPassMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionCount", DbType="SmallInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public short QuestionCount
		{
			get
			{
				return this._QuestionCount;
			}
			set
			{
				if ((this._QuestionCount != value))
				{
					this.OnQuestionCountChanging(value);
					this.SendPropertyChanging();
					this._QuestionCount = value;
					this.SendPropertyChanged("QuestionCount");
					this.OnQuestionCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="SmallInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public short Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AverageMark", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> AverageMark
		{
			get
			{
				return this._AverageMark;
			}
			set
			{
				if ((this._AverageMark != value))
				{
					this.OnAverageMarkChanging(value);
					this.SendPropertyChanging();
					this._AverageMark = value;
					this.SendPropertyChanged("AverageMark");
					this.OnAverageMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpertMark", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> ExpertMark
		{
			get
			{
				return this._ExpertMark;
			}
			set
			{
				if ((this._ExpertMark != value))
				{
					this.OnExpertMarkChanging(value);
					this.SendPropertyChanging();
					this._ExpertMark = value;
					this.SendPropertyChanged("ExpertMark");
					this.OnExpertMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> TestId
		{
			get
			{
				return this._TestId;
			}
			set
			{
				if ((this._TestId != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestIdChanging(value);
					this.SendPropertyChanging();
					this._TestId = value;
					this.SendPropertyChanged("TestId");
					this.OnTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupTestId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> GroupTestId
		{
			get
			{
				return this._GroupTestId;
			}
			set
			{
				if ((this._GroupTestId != value))
				{
					if (this._GroupTest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupTestIdChanging(value);
					this.SendPropertyChanging();
					this._GroupTestId = value;
					this.SendPropertyChanged("GroupTestId");
					this.OnGroupTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModulePercents", UpdateCheck=UpdateCheck.Never)]
		public string ModulePercents
		{
			get
			{
				return this._ModulePercents;
			}
			set
			{
				if ((this._ModulePercents != value))
				{
					this.OnModulePercentsChanging(value);
					this.SendPropertyChanging();
					this._ModulePercents = value;
					this.SendPropertyChanged("ModulePercents");
					this.OnModulePercentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestPassRule_UserTest", Storage="_UserTests", ThisKey="Id", OtherKey="TestPassRuleId")]
		public EntitySet<UserTest> UserTests
		{
			get
			{
				return this._UserTests;
			}
			set
			{
				this._UserTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestPassRule_TestModuleSet", Storage="_TestModuleSets", ThisKey="Id", OtherKey="RuleId")]
		public EntitySet<TestModuleSet> TestModuleSets
		{
			get
			{
				return this._TestModuleSets;
			}
			set
			{
				this._TestModuleSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupTest_TestPassRule", Storage="_GroupTest", ThisKey="GroupTestId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public GroupTest GroupTest
		{
			get
			{
				return this._GroupTest.Entity;
			}
			set
			{
				GroupTest previousValue = this._GroupTest.Entity;
				if (((previousValue != value) 
							|| (this._GroupTest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupTest.Entity = null;
						previousValue.TestPassRule = null;
					}
					this._GroupTest.Entity = value;
					if ((value != null))
					{
						value.TestPassRule = this;
						this._GroupTestId = value.Id;
					}
					else
					{
						this._GroupTestId = default(Nullable<int>);
					}
					this.SendPropertyChanged("GroupTest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_TestPassRule", Storage="_Test", ThisKey="TestId", OtherKey="Id", IsForeignKey=true)]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.TestPassRule = null;
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.TestPassRule = this;
						this._TestId = value.Id;
					}
					else
					{
						this._TestId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserTests(UserTest entity)
		{
			this.SendPropertyChanging();
			entity.TestPassRule = this;
		}
		
		private void detach_UserTests(UserTest entity)
		{
			this.SendPropertyChanging();
			entity.TestPassRule = null;
		}
		
		private void attach_TestModuleSets(TestModuleSet entity)
		{
			this.SendPropertyChanging();
			entity.TestPassRule = this;
		}
		
		private void detach_TestModuleSets(TestModuleSet entity)
		{
			this.SendPropertyChanging();
			entity.TestPassRule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SpecialistWeb.dbo.TestModuleSets")]
	public partial class TestModuleSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _TestId;
		
		private string _Description;
		
		private short _Number;
		
		private int _RuleId;
		
		private EntityRef<TestPassRule> _TestPassRule;
		
		private EntityRef<Test> _Test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTestIdChanging(int value);
    partial void OnTestIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnNumberChanging(short value);
    partial void OnNumberChanged();
    partial void OnRuleIdChanging(int value);
    partial void OnRuleIdChanged();
    #endregion
		
		public TestModuleSet()
		{
			this._TestPassRule = default(EntityRef<TestPassRule>);
			this._Test = default(EntityRef<Test>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestId", DbType="Int NOT NULL")]
		public int TestId
		{
			get
			{
				return this._TestId;
			}
			set
			{
				if ((this._TestId != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestIdChanging(value);
					this.SendPropertyChanging();
					this._TestId = value;
					this.SendPropertyChanged("TestId");
					this.OnTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="SmallInt NOT NULL")]
		public short Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleId", DbType="Int NOT NULL")]
		public int RuleId
		{
			get
			{
				return this._RuleId;
			}
			set
			{
				if ((this._RuleId != value))
				{
					if (this._TestPassRule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRuleIdChanging(value);
					this.SendPropertyChanging();
					this._RuleId = value;
					this.SendPropertyChanged("RuleId");
					this.OnRuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestPassRule_TestModuleSet", Storage="_TestPassRule", ThisKey="RuleId", OtherKey="Id", IsForeignKey=true)]
		public TestPassRule TestPassRule
		{
			get
			{
				return this._TestPassRule.Entity;
			}
			set
			{
				TestPassRule previousValue = this._TestPassRule.Entity;
				if (((previousValue != value) 
							|| (this._TestPassRule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestPassRule.Entity = null;
						previousValue.TestModuleSets.Remove(this);
					}
					this._TestPassRule.Entity = value;
					if ((value != null))
					{
						value.TestModuleSets.Add(this);
						this._RuleId = value.Id;
					}
					else
					{
						this._RuleId = default(int);
					}
					this.SendPropertyChanged("TestPassRule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_TestModuleSet", Storage="_Test", ThisKey="TestId", OtherKey="Id", IsForeignKey=true)]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.TestModuleSets.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.TestModuleSets.Add(this);
						this._TestId = value.Id;
					}
					else
					{
						this._TestId = default(int);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SpecialistWeb.dbo.UserTestAnswers")]
	public partial class UserTestAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _QuestionId;
		
		private string _Answer;
		
		private bool _IsRight;
		
		private int _UserTestId;
		
		private EntityRef<UserTest> _UserTest;
		
		private EntityRef<TestQuestion> _TestQuestion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnIsRightChanging(bool value);
    partial void OnIsRightChanged();
    partial void OnUserTestIdChanging(int value);
    partial void OnUserTestIdChanged();
    #endregion
		
		public UserTestAnswer()
		{
			this._UserTest = default(EntityRef<UserTest>);
			this._TestQuestion = default(EntityRef<TestQuestion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", DbType="Int NOT NULL")]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._TestQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRight", DbType="Bit NOT NULL")]
		public bool IsRight
		{
			get
			{
				return this._IsRight;
			}
			set
			{
				if ((this._IsRight != value))
				{
					this.OnIsRightChanging(value);
					this.SendPropertyChanging();
					this._IsRight = value;
					this.SendPropertyChanged("IsRight");
					this.OnIsRightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTestId", DbType="Int NOT NULL")]
		public int UserTestId
		{
			get
			{
				return this._UserTestId;
			}
			set
			{
				if ((this._UserTestId != value))
				{
					if (this._UserTest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserTestIdChanging(value);
					this.SendPropertyChanging();
					this._UserTestId = value;
					this.SendPropertyChanged("UserTestId");
					this.OnUserTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTest_UserTestAnswer", Storage="_UserTest", ThisKey="UserTestId", OtherKey="Id", IsForeignKey=true)]
		public UserTest UserTest
		{
			get
			{
				return this._UserTest.Entity;
			}
			set
			{
				UserTest previousValue = this._UserTest.Entity;
				if (((previousValue != value) 
							|| (this._UserTest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserTest.Entity = null;
						previousValue.UserTestAnswers.Remove(this);
					}
					this._UserTest.Entity = value;
					if ((value != null))
					{
						value.UserTestAnswers.Add(this);
						this._UserTestId = value.Id;
					}
					else
					{
						this._UserTestId = default(int);
					}
					this.SendPropertyChanged("UserTest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestQuestion_UserTestAnswer", Storage="_TestQuestion", ThisKey="QuestionId", OtherKey="Id", IsForeignKey=true)]
		public TestQuestion TestQuestion
		{
			get
			{
				return this._TestQuestion.Entity;
			}
			set
			{
				TestQuestion previousValue = this._TestQuestion.Entity;
				if (((previousValue != value) 
							|| (this._TestQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestQuestion.Entity = null;
						previousValue.UserTestAnswers.Remove(this);
					}
					this._TestQuestion.Entity = value;
					if ((value != null))
					{
						value.UserTestAnswers.Add(this);
						this._QuestionId = value.Id;
					}
					else
					{
						this._QuestionId = default(int);
					}
					this.SendPropertyChanged("TestQuestion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="SpecialistWeb.dbo.TestCalc")]
	public partial class TestCalc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TestId;
		
		private int _TryCount;
		
		private int _PassCount;
		
		private int _UserCount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestIdChanging(int value);
    partial void OnTestIdChanged();
    partial void OnTryCountChanging(int value);
    partial void OnTryCountChanged();
    partial void OnPassCountChanging(int value);
    partial void OnPassCountChanged();
    partial void OnUserCountChanging(int value);
    partial void OnUserCountChanged();
    #endregion
		
		public TestCalc()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TestId
		{
			get
			{
				return this._TestId;
			}
			set
			{
				if ((this._TestId != value))
				{
					this.OnTestIdChanging(value);
					this.SendPropertyChanging();
					this._TestId = value;
					this.SendPropertyChanged("TestId");
					this.OnTestIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TryCount", DbType="Int NOT NULL")]
		public int TryCount
		{
			get
			{
				return this._TryCount;
			}
			set
			{
				if ((this._TryCount != value))
				{
					this.OnTryCountChanging(value);
					this.SendPropertyChanging();
					this._TryCount = value;
					this.SendPropertyChanged("TryCount");
					this.OnTryCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassCount", DbType="Int NOT NULL")]
		public int PassCount
		{
			get
			{
				return this._PassCount;
			}
			set
			{
				if ((this._PassCount != value))
				{
					this.OnPassCountChanging(value);
					this.SendPropertyChanging();
					this._PassCount = value;
					this.SendPropertyChanged("PassCount");
					this.OnPassCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCount", DbType="Int NOT NULL")]
		public int UserCount
		{
			get
			{
				return this._UserCount;
			}
			set
			{
				if ((this._UserCount != value))
				{
					this.OnUserCountChanging(value);
					this.SendPropertyChanging();
					this._UserCount = value;
					this.SendPropertyChanged("UserCount");
					this.OnUserCountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
